flux-application:
  secrets:
    helm: true
    url: "https://github.com/filecoin-project/gitops-profile-catalog"
    path: "./secrets/prometheus"
    branch: main
    targetNamespace: '{{ (.params).CLUSTER_NAME | default "test-cluster" }}'
    
kube-prometheus-stack:
  fullnameOverride: weaveworks-prometheus
  enabled: true
  grafana:
    enabled: false
  alertmanager:
    enabled: true
    alertmanagerSpec:
      replicas: 3
      secrets: ["alertmanager-slack-urls"]
    templateFiles:
      slack.tmpl: >-
        {{`{{`}} define "slack.filecoin.text" {{`}}`}}
        {{`{{ range .Alerts -}}`}}
        *Alert:* {{`{{ .Annotations.title }}`}}{{`{{ if .Labels.severity }}`}} - `{{`{{ .Labels.severity }}`}}`{{`{{ end }}`}}

        *Description:* {{`{{ .Annotations.description }}`}}

        *Details:*
         {{`{{ range .Labels.SortedPairs }}`}} â€¢ *{{`{{ .Name }}`}}:* `{{`{{ .Value }}`}}`
         {{`{{ end }}`}}
        {{`{{ end }}`}}
        {{`{{ end }}`}}
    config:
      route:
        group_by: ["alertname", "cluster"]
        group_wait: 500ms
        receiver: "null"
        group_interval: 500ms
        repeat_interval: 1d
        routes:
          - match:
              severity: "critical|none|warning|info"
            receiver: "slack-infra-alerts-test"
      templates:
        - '/etc/alertmanager/config/*.tmpl'
      receivers:
        - name: "null"
        - name: "slack-infra-alerts-test"
          slack_configs:
          - channel: "#hook-testing"
            api_url_file: "/etc/alertmanager/secrets/alertmanager-slack-urls/test-channel"
            title: "[{{`{{ .Alerts.Firing | len }}`}} Firing] {{`{{ .CommonLabels.severity }}`}} {{`{{ .GroupLabels.alertname }}`}}"
            text: |-
              {{`{{`}} template "slack.filecoin.text" . {{`}}`}}
            send_resolved: true
        - name: "slack-{{ .params.TEAM }}-alerts-test"
          slack_configs:
          - channel: "#{{ .params.TEAM }}-alerts-test"
            api_url_file: "/etc/alertmanager/secrets/alertmanager-slack-urls/{{ .params.TEAM }}-alerts-test"
            title: "[{{`{{ .Alerts.Firing | len }}`}} Firing] {{`{{ .CommonLabels.severity }}`}} {{`{{ .GroupLabels.alertname }}`}}"
            text: |-
              {{`{{`}} template "slack.filecoin.text" . {{`}}`}}
            send_resolved: true
  prometheus:
    prometheusSpec:
      externalLabels:
        cluster: '{{ (.params).CLUSTER_NAME | default "test-cluster" }}'
      replicaExternalLabelName: __replica__
      thanos:
        objectStorageConfig:
          key: objstore.yml
          name: thanos-storage-config
      retention: 2d
      retentionSize: "15GB"
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: gp2
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 20Gi
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: 'arn:aws:iam::{{ .params.AWS_ACCOUNT_ID }}:role/{{ .params.CLUSTER_NAME }}-monitoring'
    thanosIngress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
        nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
        nginx.ingress.kubernetes.io/auth-tls-secret: "flux-system/thanos-server-tls"
      hosts:
      - 'thanos.{{ printf "%.*s" 23 (.params).CLUSTER_NAME }}.{{ (.params).TEAM | default "netops" }}.{{ (.params).AWS_ACCOUNT_NAME | default "netops" }}.w3ops.net'
      paths:
      - /
      pathType: ImplementationSpecific
      tls:
      - secretName: thanos-sidecar-tls
        hosts:
        - 'thanos.{{ printf "%.*s" 23 (.params).CLUSTER_NAME }}.{{ (.params).TEAM | default "netops" }}.{{ (.params).AWS_ACCOUNT_NAME | default "netops" }}.w3ops.net'
prometheus-pushgateway:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: kube-system
